spring:
  application.name: accounts

  jpa:
    hibernate.ddl-auto: update
    show-sql: false

  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  cache:
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    cache-names:
      - buckets
    caffeine:
      spec: maximumSize=1000000,expireAfterAccess=3600s

  data.redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        "[spring.json.trusted.packages]": "edu.vl4ds4m.tbank.dto"

services:
  timeout: 5

  kafka:
    topic: ${KAFKA_TOPIC}

messaging:
  endpoint: /ws
  destination-prefix: /topic

notification:
  host: ${NOTIFICATION_SERVICE_URL}
  url: ${notification.host}/notification
  count: 100
  delay: 5s

idempotency:
  ttl: 30s
  paths:
    - /transfers
    - /accounts/*

grpc.client.accounts:
  address: ${CONVERTER_URL}
  enableKeepAlive: true
  keepAliveWithoutCalls: true
  negotiation-type: plaintext

bucket4j:
  enabled: true
  methods:
    - name: customer-balance
      cache-name: buckets
      rate-limit:
        bandwidths:
          - capacity: 5
            time: 60
            unit: seconds
            refill-speed: greedy
